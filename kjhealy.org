#+OPTIONS: toc:nil num:nil ^:nil
#+TITLE: Starter Kit kjhealy customizations

This is my add-on to the [[file:starter-kit.org][Emacs Starter Kit]]. It provides some
additional settings useful for social scientists, together with some
other personal customizations I find helpful. This org-mode file
documents these additions and provides the code to implement them. See
the [[file:starter-kit.org][main starter-kit file]] for further information. 

* Starter Kit kjhealy
YOU MUST CHANGE THE NAME OF THIS FILE to the value of the Emacs
 variable =user-login-name= OR =system-name=, so that it will be
 picked up by =init.el= when Emacs starts up, and be loaded
 properly. To find the current value of these variables on your
 system, do =C-h-v system-name [RET]= and =C-h-v user-login-name
 [RET]=. For example, on my system =user-login-name= is 'kjhealy', so
 this file is named =kjhealy.org=, and when Emacs starts up with the
 starter kit it creates the file =kjhealy.el=.

You will also need to change the values for the location of bibtex
 databases, pandoc and orgmode-mobile specified below, and some other
 settings. *Search for 'kjhealy' in this file* to find the paths that
 need to be updated. Change them as needed or comment them out if you
 don't use these features.
 
** Package Locations
 Location of various local packages (in .emacs.d/vendor)
 because I don't want to keep them in =/Applications/Emacs.app/= or in
 =/usr/share/local/=. 

*** Load path
#+srcname: local-loadpath
#+begin_src emacs-lisp
    (if (fboundp 'normal-top-level-add-subdirs-to-load-path)
        (let* ((my-lisp-dir "~/.emacs.d/")
              (default-directory my-lisp-dir))
           (setq load-path (cons my-lisp-dir load-path))
           (normal-top-level-add-subdirs-to-load-path)))
#+end_src

** Miscellaneous Settings and starter-kit overrides
*** Window size
#+srcname: window_size
#+begin_src emacs-lisp
    (setq default-frame-alist
    '(
    ; frame width and height
    (width             . 100)
    (height            . 50)
    )
    )
#+end_src

*** Recent File Menu
#+srcname: local-loadpath
#+begin_src emacs-lisp
    ;; recent file menu
    (require 'recentf)
    (recentf-mode 1)
#+end_src

*** Color Theme and Line Highlighting
#+srcname: local-settings
#+begin_src emacs-lisp
  ;; Color Theme from vendor directory
  (require 'color-theme)
  (load-file
  "~/.emacs.d/src/color-theme/themes/color-theme-twilight.el")
  (load-file
  "~/.emacs.d/src/color-theme/themes/color-theme-tangosoft.el") 
  (if window-system
    (color-theme-twilight)   ;; Emacs started in own window
    (color-theme-tangosoft) ;; Emacs started in tty
    )
  
  ;; Highlight current line (twilight theme builds in support for this)
  (global-hl-line-mode 1)
#+end_src

*** Full Screen Hacks
    What works depends on the flavor of emacs you are using,
    unfortunately. Choose as appropriate. 
#+srcname: fullscreen
#+begin_src emacs-lisp 
  ;; require maxframe package to conveniently maxmimize the window
  ;; with M-x MFA. Doesn't work with Emacs 23 on Mac. 
  ;;(require 'maxframe)
  ;;(global-set-key (kbd "C-c m") 'x-maximize-frame)
  
  ;; Fullscreen toggle -- Only works with patched emacs build at git://github.com/typester/emacs.git
  (global-set-key (kbd "C-c m") 'ns-toggle-fullscreen)
  
  ;; Fullscreen toggle -- using maxframe.el
  ;; (require 'maxframe)
  ;; (defvar my-fullscreen-p t "Check if fullscreen is on or off")
  
  ;; (defun my-toggle-fullscreen ()
  ;; (interactive)
  ;; (setq my-fullscreen-p (not my-fullscreen-p))
  ;; (if my-fullscreen-p
  ;; (restore-frame)
  ;; (maximize-frame)))
  
  ;; (global-set-key (kbd "C-c m") 'my-toggle-fullscreen)

  ;; For use with Yamamoto Mitsuharu's Carbon-patched Emacs 23. 
  ;; (set-frame-parameter nil 'fullscreen 'fullboth) 
  (defun fullscreen (&optional f)
      (interactive)
      (set-frame-parameter f 'fullscreen
                           (if (frame-parameter f 'fullscreen) nil 'fullboth)))
    (global-set-key (kbd "C-c f") 'fullscreen)
    (add-hook 'after-make-frame-functions 'fullscreen)
  
#+end_src

*** Windmove
    If you don't set this, you keep getting elisp errors when you try
    to wrap around. 
#+srcname: local-windmove
#+begin_src emacs-lisp
(setq windmove-wrap-around t)
#+end_src

*** Resizing inside the frame
#+srcname: resize-splits
#+begin_src emacs-lisp
  ;; resizing 'windows' (i.e., inside the frame)
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)  
#+end_src

*** Mac Key mode
    Used with Mitsuharu Yamamoto's carbon-patched 23.1.94, which turns
    off support for default mac bindings. 
#+srcname: mac-keys
#+begin_src emacs-lisp 
    (setq mac-command-modifier 'alt mac-option-modifier 'meta)
    (require 'redo+)
    (require 'mac-key-mode)
    (mac-key-mode 1)
   ;;(add-hook 'mac-key-mode-hook
   ;;     (lambda()
   ;;       (interactive)
   ;;       (if mac-key-mode
   ;;           (setq mac-option-modifier 'meta)
   ;;           (setq mac-option-modifier nil)
   ;;           )))
#+end_src

** Local LaTeX settings
*** SyncTeX, PDF mode, Skim
#+srcname: local-loadpath
#+begin_src emacs-lisp
   ;; Synctex with Skim
   ;;(add-hook 'TeX-mode-hook
   ;;(lambda ()
   ;;(add-to-list 'TeX-output-view-style
   ;;'("^pdf$" "."
   ;; "/Applications/Skim.app/Contents/SharedSupport/displayline %n %o %b")))
   ;; )

   ;; Make emacs aware of multi-file projects
   ;; (setq-default TeX-master nil)

   ;; Auto-raise Emacs on activation (from Skim, usually)
   (defun raise-emacs-on-aqua()
   (shell-command "osascript -e 'tell application \"Emacs\" to activate' &"))
   (add-hook 'server-switch-hook 'raise-emacs-on-aqua)
#+end_src

*** Local RefTeX Settings
#+srcname: local-reftex
#+begin_src emacs-lisp    
    ;; Make RefTex able to find my local bib files
    (setq reftex-bibpath-environment-variables
    '("/Users/kjhealy/Library/texmf/bibtex/bib"))

    ;; Default bibliography
    (setq reftex-default-bibliography
    '("/Users/kjhealy/Documents/bibs/socbib.bib"))


    ;; CDLaTex minor mode: tab-trigger environments, paired paren
    ;; insertion, etc
    ;; (autoload 'cdlatex-mode "cdlatex" "CDLaTeX Mode" t)
    ;; (autoload 'turn-on-cdlatex "cdlatex" "CDLaTeX Mode" nil)
    ;; (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)   ; with AUCTeX LaTeX
    ;;                                         ; mode

    ;; set which characters are autopaired // Doesn't work. Set in custom, below.
    ;; (add-hook 'cdlatex-mode-hook
    ;;   (function (lambda ()
    ;;               (setq cdlatex-paired-parens
    ;;                     '("$[{("))
    ;;             )))
#+end_src

*** Local vc commands
    Run the vc shellscript before running xelatex with C-c c (instead of
    C-c C-c for regular compile)
#+srcname: vc-command
#+begin_src emacs-lisp
    (fset 'run-vc-then-xelatex
    [?\M-! ?v ?c return ?\C-c ?\C-c return])
    (global-set-key (kbd "C-c c") 'run-vc-then-xelatex);; Run the VC command before running xelatex
    (fset 'run-vc-then-xelatex
    [?\M-! ?v ?c return ?\C-c ?\C-c return])
    (global-set-key (kbd "C-c c") 'run-vc-then-xelatex)
#+end_src

    Or just run vc alone --- this is useful when writing LaTeX files
    using org-mode. (See the org-mode customizations below).
#+source: vc-alone
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c v")
                      (lambda ()
                        (interactive)
                        (shell-command "vc")))
#+end_src

** Local iBuffer Settings
   Manage a lot of buffers easily with C-x C-b. Already set up
   elsewhere in the starter kit. Add local configuration here, e.g.,
   display categories.
#+srcname: iBuffer-custom
#+begin_src emacs-lisp 
  (setq ibuffer-saved-filter-groups
      '(("home"
	 ("emacs-config" (or (filename . ".emacs.d")
			     (filename . "emacs-config")))
	 ("Org" (or (mode . org-mode)
		    (filename . "OrgMode")))
	 ("Web Dev" (or (mode . html-mode)
			(mode . css-mode)))
	 ("Magit" (name . "\*magit"))
	 ("ESS" (mode . ess-mode))
         ("LaTeX" (mode . latex-mode))
	 ("Help" (or (name . "\*Help\*")
		     (name . "\*Apropos\*")
		     (name . "\*info\*"))))))

        (add-hook 'ibuffer-mode-hook 
	             '(lambda ()
	             (ibuffer-switch-to-saved-filter-groups "home")))
       (setq ibuffer-show-empty-filter-groups nil)                     
       (setq ibuffer-expert t)
       (add-hook 'ibuffer-mode-hook 
       '(lambda ()
       (ibuffer-auto-mode 1)
       (ibuffer-switch-to-saved-filter-groups "home")))
#+end_src

** Minimal mode
   A nice clutter-free appearance with a reduced-size modeline and no
   scroll bars. 
#+source: minimal-mode
#+begin_src emacs-lisp
  (require 'minimal)
  (global-set-key (kbd "C-c s") 'minimal-mode)
#+end_src
  
** Final Custom elements
#+srcname: final-custom
#+begin_src emacs-lisp
  ;; Put the menu bar back
  (menu-bar-mode 1)
  
  ;; Line-spacing tweak (Optimized for PragmataPro)
  (setq-default line-spacing 5)
  
  ;; minimize fringe
  (setq-default indicate-empty-lines nil)
  
  ;; Tweak to ergo keybindings for commenting regions of text
  (global-set-key (kbd "M-'") 'comment-or-uncomment-region)
  
  ;; Base dir
  (cd "~/")
  
  ;; custom variables kludge. Why can't I get these to work via setq?
  (custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(LaTeX-XeTeX-command "xelatex -synctex=1")
  '(TeX-engine (quote xetex))
  '(TeX-view-program-list (quote (("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline %n %o %b"))))
  '(TeX-view-program-selection (quote (((output-dvi style-pstricks) "dvips and gv") (output-dvi "xdvi") (output-pdf "Skim") (output-html "xdg-open"))))
  ;; '(cdlatex-paired-parens "$[{(")
  )
#+end_src
   
   
   
   
   
