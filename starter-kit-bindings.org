#+TITLE: Starter Kit Bindings
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Bindings

Key Bindings.

** You know, like Readline.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-M-h") 'backward-kill-word)
#+end_src

** Align your code in a pretty way.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x \\") 'align-regexp)
#+end_src

** Completion that uses many different methods to find options.
#+begin_src emacs-lisp 
(global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

** Perform general cleanup.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-c n") 'cleanup-buffer)
#+end_src

** Turn on the menu bar for exploring new modes
#+begin_src emacs-lisp 
(global-set-key [f1] 'menu-bar-mode)
#+end_src

** Font size
#+begin_src emacs-lisp 
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
#+end_src

** Use regex searches by default.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "\C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src

** Jump to a definition in the current file. (This is awesome.)
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x C-i") 'ido-imenu)
#+end_src

** File finding
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
(global-set-key (kbd "C-x C-M-f") 'find-file-in-project)
(global-set-key (kbd "C-x f") 'recentf-ido-find-file)
(global-set-key (kbd "C-x C-p") 'find-file-at-point)
(global-set-key (kbd "C-c y") 'bury-buffer)
(global-set-key (kbd "C-c r") 'revert-buffer)
(global-set-key (kbd "M-`") 'file-cache-minibuffer-complete)
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** Browse the Kill Ring
    Conveniently navigate the kill-ring (ie, the cut/copy clipboard
    history) in a pop-up buffer.
#+srcname: kill-ring
#+begin_src emacs-lisp 
  (when (require 'browse-kill-ring nil 'noerror)
  (browse-kill-ring-default-keybindings))
#+end_src

** Window switching. (C-x o goes to the next window)
#+begin_src emacs-lisp 
(windmove-default-keybindings) ;; Shift+direction
(global-set-key (kbd "C-x O") (lambda () (interactive) (other-window -1))) ;; back one
(global-set-key (kbd "C-x C-o") (lambda () (interactive) (other-window 2))) ;; forward two
#+end_src

** Indentation help
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x ^") 'join-line)
#+end_src

** Start eshell or switch to it if it's active.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x m") 'eshell)
#+end_src

** Start a new eshell even if one is active.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x M") (lambda () (interactive) (eshell t)))
#+end_src

** Start a regular shell if you prefer that.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x M-m") 'shell)
#+end_src

** If you want to be able to M-x without meta
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x C-m") 'execute-extended-command)
#+end_src

** Smex replaces M-x
    Smex replaces M-x, and is built on top of ido-mode. See
    http://github.com/nonsequitur/smex or
    http://www.emacswiki.org/emacs/Smex for details.  
#+srcname: smex
#+begin_src emacs-lisp
  (require 'smex)
  (smex-initialize)  
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "C-x C-m") 'smex) ;; supersedes binding in starter-kit-bindings.org
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  (global-set-key (kbd "C-x C-M") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
  (setq smex-show-unbound-commands t)
  (smex-auto-update 30)
#+end_src
    
** Fetch the contents at a URL, display it raw.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x h") 'view-url)
#+end_src

** Help should search more than just commands
#+begin_src emacs-lisp 
(global-set-key (kbd "C-h a") 'apropos)
#+end_src

** Should be able to eval-and-replace anywhere.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-c e") 'eval-and-replace)
#+end_src

** Applications
#+begin_src emacs-lisp 

(global-set-key (kbd "C-c j") (lambda () (interactive) (switch-or-start 'jabber-connect "*-jabber-*")))
(global-set-key (kbd "C-c g") (lambda () (interactive) (switch-or-start 'gnus "*Group*")))
(global-set-key (kbd "C-c i") (lambda () (interactive) (switch-or-start (lambda ()
                                                                     (rcirc-connect "irc.freenode.net"))
                                                                   "*irc.freenode.net*")))
(global-set-key (kbd "C-c J") 'jabber-send-presence)
(global-set-key (kbd "C-c M-j") 'jabber-disconnect)
(global-set-key (kbd "C-x g") 'magit-status)
#+end_src

** This is a little hacky since VC doesn't support git add internally
#+begin_src emacs-lisp 
(eval-after-load 'vc
  (define-key vc-prefix-map "i" '(lambda () (interactive)
                                   (if (not (eq 'Git (vc-backend buffer-file-name)))
                                       (vc-register)
                                     (shell-command (format "git add %s" buffer-file-name))
                                     (message "Staged changes.")))))
#+end_src

** Activate occur easily inside isearch
#+begin_src emacs-lisp 
(define-key isearch-mode-map (kbd "C-o")
  (lambda () (interactive)
    (let ((case-fold-search isearch-case-fold-search))
      (occur (if isearch-regexp isearch-string (regexp-quote isearch-string))))))
#+end_src

** Closing
#+begin_src emacs-lisp 
(provide 'starter-kit-bindings)
;;; starter-kit-bindings.el ends here
#+end_src
** Org-mode
Two global binding for Org-mode (see [[file:starter-kit-org.org][starter-kit-org]])

The [[http://orgmode.org/manual/Agenda-Views.html#Agenda-Views][Org-mode agenda]] is good to have close at hand
#+begin_src emacs-lisp
(define-key global-map "\C-ca" 'org-agenda)
#+end_src

Org-mode supports [[http://orgmode.org/manual/Hyperlinks.html#Hyperlinks][links]], this command allows you to store links
globally for later insertion into an Org-mode buffer.  See
[[http://orgmode.org/manual/Handling-links.html#Handling-links][Handling-links]] in the Org-mode manual.
#+begin_src emacs-lisp
(define-key global-map "\C-cl" 'org-store-link)
#+end_src
** Magit
It's to the point now where I almost can't use git without magit.
- [[http://zagadka.vm.bytemark.co.uk/magit/][Homepage]]
- [[http://zagadka.vm.bytemark.co.uk/magit/magit.html][Manual]]
- [[http://groups.google.com/group/magit/][Mailing list]]
#+begin_src emacs-lisp
  (require 'magit)
  (define-key global-map "\M-\C-g" 'magit-status)
#+end_src

#+resname:
: magit-status

** Rgrep
Rgrep is infinitely useful in multi-file projects.

(see [[elisp:(describe-function 'rgrep)]])

#+begin_src emacs-lisp
  (define-key global-map "\C-x\C-r" 'rgrep)
#+end_src
** Rotate Windows in a Frame
When windows get out of order, you can rotate them.

#+source: rotate-windows
#+begin_src emacs-lisp
   (defun rotate-windows ()
     "Rotate your windows" (interactive) (cond ((not (> (count-windows) 1)) (message "You can't rotate a single window!"))
  (t
   (setq i 1)
   (setq numWindows (count-windows))
   (while  (< i numWindows)
     (let* (
            (w1 (elt (window-list) i))
            (w2 (elt (window-list) (+ (% i numWindows) 1)))
            (b1 (window-buffer w1))
            (b2 (window-buffer w2))
            (s1 (window-start w1))
            (s2 (window-start w2))
            )
       (set-window-buffer w1  b2)
       (set-window-buffer w2 b1)
       (set-window-start w1 s2)
       (set-window-start w2 s1)
       (setq i (1+ i)))))))

  (global-set-key (kbd "C-c <right>") 'rotate-windows)
#+end_src
  
